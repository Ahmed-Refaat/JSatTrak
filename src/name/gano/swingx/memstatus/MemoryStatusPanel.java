/*
 * MemoryStatusPanel.java
 *
 * Created on August 2, 2008, 10:18 PM
 */

package name.gano.swingx.memstatus;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import javax.swing.Timer;

/**
 *
 * @author  Shawn
 */
public class MemoryStatusPanel extends javax.swing.JPanel implements MouseListener
{
    private Timer playTimer;
    private boolean stopTimer = false;
    private int updateRateMs = 2500;
    
    DecimalFormat df = new DecimalFormat("#,##0.00");

    /** Creates new form MemoryStatusPanel */
    public MemoryStatusPanel() 
    {
        initComponents();
        
        this.addMouseListener(this);
        
        memProgressBar.setMaximum(100);
        memProgressBar.addMouseListener(this);
        
        playTimer = new Timer(updateRateMs, new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                updateStatus();
                
                if (stopTimer)
                {
                    playTimer.stop();
                                        
                }
            }
        });
        playTimer.setRepeats(true);
        playTimer.start();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memProgressBar = new javax.swing.JProgressBar();

        memProgressBar.setString("0 MB / 0 MB");
        memProgressBar.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void updateStatus()
    {
        double totMem1 = java.lang.Runtime.getRuntime().totalMemory() / 1048576.0; // Megabytes
        double freeMem1 = java.lang.Runtime.getRuntime().freeMemory() / 1048576.0;
        double usedMem1 = totMem1 - freeMem1;

        // take one time step in the aimation
        int usedMemPercent = (int) Math.round(100.0 * (usedMem1) / totMem1);
        memProgressBar.setValue(usedMemPercent);

        memProgressBar.setString(df.format(usedMem1) + " MB / " + df.format(totMem1) + " MB");
        
        memProgressBar.setToolTipText("Free Memory: " + df.format(freeMem1) + " MB");
        
        if(!this.isVisible())
        {
            stopTimer = true; // stop updates
        }
    } // updateStatus
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar memProgressBar;
    // End of variables declaration//GEN-END:variables


    public void mousePressed(MouseEvent e)
    {
    }

    public void mouseReleased(MouseEvent e)
    {
    }

    public void mouseEntered(MouseEvent e)
    {
    }

    public void mouseExited(MouseEvent e)
    {
    }

    public void mouseClicked(MouseEvent e)
    {
        System.gc();
        updateStatus();
        //System.out.println("GC");
    }
    

}
