// Shawn E. Gano
// 6 December 2016
// Exports the Az/El/Range/Time for all Ground Stations to all Satellites (that use the SGP4 propagator) to file(s) named  "Ground Station Name".txt (created where JSatTrak.jar / .exe is located)
//     The export will start at the current time in the GUI and run for 1 day in increments of 60 seconds (this can be easily customized)
//
//   File contains: Header/separators for each Ground Station Satellite pair and then:
//                    UTC, Az, El, Range (km)

import jsattrak.objects.SatelliteTleSGP4;
import jsattrak.objects.GroundStation;
import jsattrak.utilities.StateVector;
import name.gano.astro.time.Time;
import name.gano.astro.AstroConst;

// ------ propagation parameters (modify for longer runs or to output at different intervals) ------
stepSizeSeconds = 60; // every 1 minute
stopPropagationSeconds = 86400; // 86400 seconds = 1 day
// ------------------------------------------------------------------------


// start time -- get the current time (current JulianDate)
// Time currentJulianDate
Time startTime = jsattrak.currentJulianDate;
propSteps = (int)(stopPropagationSeconds/stepSizeSeconds);

// get the ground station hash
groundStationHash = jsattrak.getGsHash();

// get satellite hash
satHash =  jsattrak.getSatHash();


// loop for all the ground stations  (using Ground Station key / name)
for(String groundStationKey : groundStationHash.keys())
{ 
	gs = groundStationHash.get(groundStationKey); // get the Ground Station from the hash

	// open file and write data - for each ground station
	PrintWriter writer = new PrintWriter(groundStationKey.trim() + ".txt", "UTF-8");
		
	writer.println("# UTC, Azimuth [deg], Elevation [deg], Range [m]  Notes: (1) UTC is Coordinated Universal Time [Julian Date]");
	writer.println("# step size = " + stepSizeSeconds + " seconds,  Total Propagation Time = " + stopPropagationSeconds + " seconds");


	// loop through all the SGP4 satellites  (custom satellites not supported in this script)
	for(String str : satHash.keys())
	{ 
		sat = satHash.get(str); // get the sat from the hash
	
		if (sat instanceof SatelliteTleSGP4) 
		{
			// write to Console Log:
			System.out.println("# - Ground Station: " + groundStationKey + " to  Satellite: " + str );
			
			// create header with new sat name (and Ground station pair)
			writer.println("####################################");
			writer.println("# Ground Station: " + groundStationKey.trim() );
			writer.println("#    to ");
			writer.println("# Satellite     : " + str.trim() );
			writer.println("####################################");
				
			SatelliteTleSGP4 sgp4Sat = (SatelliteTleSGP4)sat;
			
			// the satellite has to be propagated for each time step to get the postion, then the A/E/R calculated
			for(int stepNum=0;stepNum<propSteps;stepNum++)
			{
				jd = startTime.getJulianDate() + (stepNum * stepSizeSeconds)/86400.0;
				sgp4Sat.propogate2JulDate( jd );
					
				// Have JSatTrak calculate the Az/El/Range from the Ground Station to the Satellite
				double[] aer = gs.calculate_AER(sgp4Sat.getTEMEPos());  // use MOD (time) for this calculation

	            // write  A/E/R data
				writer.println(jd + "," +  aer[0] + "," +  aer[1] + "," +  aer[2]  );
				
			} // for each time step
		
		
			// finally propagate the satellite back to the original time
			sgp4Sat.propogate2JulDate( startTime.getJulianDate() );
					
		}
		else // not a custom satellite - skipped
		{
			System.out.println("Not SGP4 (skipped) :" + str);
		}

	} // done looping through all satellites
	
	// close file
	writer.close();

} // done looping through all ground stations

// alert user
System.out.println("Az/El/Range Export Plugin Completed.");
JOptionPane.showMessageDialog(jsattrak, "Azimuth, Elevation, Range export complete.  The flat files (one for each ground station) are located in the root directory of JSatTrak.  \n\nDetails and/or errors are displayed in the Log Console.");
